{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile within the SymptoScan application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "medicalHistoryId": {
          "type": "string",
          "description": "Reference to the user's MedicalHistory. (Relationship: UserProfile 1:1 MedicalHistory)"
        }
      },
      "required": [
        "id",
        "email",
        "medicalHistoryId"
      ]
    },
    "MedicalHistory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MedicalHistory",
      "type": "object",
      "description": "Stores the medical history of a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the medical history entry."
        },
        "conditions": {
          "type": "array",
          "description": "List of medical conditions the user has.",
          "items": {
            "type": "string"
          }
        },
        "medications": {
          "type": "array",
          "description": "List of medications the user is taking.",
          "items": {
            "type": "string"
          }
        },
        "allergies": {
          "type": "array",
          "description": "List of allergies the user has.",
          "items": {
            "type": "string"
          }
        },
        "surgeries": {
          "type": "array",
          "description": "List of surgeries the user has undergone.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "Diagnosis": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Diagnosis",
      "type": "object",
      "description": "Stores a diagnosis generated by the AI for a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the diagnosis."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to the UserProfile this diagnosis belongs to. (Relationship: UserProfile 1:N Diagnosis)"
        },
        "symptoms": {
          "type": "array",
          "description": "List of symptoms the user provided for this diagnosis.",
          "items": {
            "type": "string"
          }
        },
        "possibleConditions": {
          "type": "array",
          "description": "List of possible medical conditions suggested by the AI.",
          "items": {
            "type": "string"
          }
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the diagnosis was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userProfileId",
        "symptoms",
        "possibleConditions",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/userProfiles/{userProfileId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Path-based ownership is enforced. Includes userId as a path parameter for authorization.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "userProfileId",
              "description": "The unique identifier of the user profile."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/medicalHistories/{medicalHistoryId}",
        "definition": {
          "entityName": "MedicalHistory",
          "schema": {
            "$ref": "#/backend/entities/MedicalHistory"
          },
          "description": "Stores user medical history. Path-based ownership is enforced. Includes userId as a path parameter for authorization.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "medicalHistoryId",
              "description": "The unique identifier of the medical history entry."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/diagnoses/{diagnosisId}",
        "definition": {
          "entityName": "Diagnosis",
          "schema": {
            "$ref": "#/backend/entities/Diagnosis"
          },
          "description": "Stores diagnoses generated for the user. Path-based ownership is enforced. Includes userId as a path parameter for authorization.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "diagnosisId",
              "description": "The unique identifier of the diagnosis."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure data security, scalability, and ease of debugging, in line with the defined principles.  Authorization Independence is achieved by using path-based ownership for user-specific data. Each user's data is stored under their unique user ID, eliminating the need for complex `get()` calls in security rules. This approach ensures atomic operations and straightforward debugging.  Structural Segregation is maintained by storing different data types in separate collections, each with a homogeneous security posture. For instance, user profiles and medical histories are kept in distinct collections. Access Modeling follows consistent patterns. User profiles, medical histories, and diagnoses are stored under the `/users/{userId}` path, ensuring clear ownership. This structure inherently supports QAPs, as listing operations are naturally scoped to the user's own data, preventing unauthorized access.  Invariants like ownership and timestamps are enforced through the data structure itself.  The structure also models the relationships with the different entities by nesting data"
  }
}